name: Build ARM64 Docker Image from External Repo (Optimized)

on:
  push:
    branches:
      - main  # 觸發建置的分支 (可修改)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 檢出當前倉庫 (Workflow 程式碼)
        uses: actions/checkout@v4 # 升級到 v4 版本，更穩定和快速

      - name: 克隆外部倉庫 (Dockerfile 來源)
        id: clone_repo # 為 step 設定 ID，方便後續引用輸出
        run: |
          TARGET_REPO_URL="https://github.com/webtor-io/self-hosted.git" # 外部倉庫 URL (可修改)
          REPO_NAME=$(basename $TARGET_REPO_URL .git)
          echo "正在克隆外部倉庫: $REPO_NAME"
          git clone --depth 1 $TARGET_REPO_URL  # 加入 --depth 1，僅克隆最新 commit，加速克隆
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT # 設定輸出變數，供後續 steps 使用

      - name: 設定 Docker Buildx
        uses: docker/setup-buildx-action@v3 # 升級到 v3 版本

      - name: 設定 QEMU 模擬器
        uses: docker/setup-qemu-action@v3 # 升級到 v3 版本

      - name: 快取 Docker layers
        uses: actions/cache@v4 # 升級到 v4 版本
        id: cache-docker # 為 step 設定 ID
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ steps.clone_repo.outputs.REPO_NAME }} # 缓存 Key 包含仓库名
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-

      - name: 建置 ARM64 Docker 镜像
        run: |
          set -e # 遇到錯誤立即終止
          REPO_NAME="${{ steps.clone_repo.outputs.REPO_NAME }}" # 從前一個 step 取得 REPO_NAME
          IMAGE_TAG="mick2019/$REPO_NAME:latest" # 镜像标签 (用戶名/倉庫名:latest) - 可修改用戶名
          echo "正在建置 Docker 镜像，標籤為: $IMAGE_TAG"
          docker buildx build \
            --platform linux/arm64 \
            -t $IMAGE_TAG \
            --cache-from type=local,src=/tmp/.buildx-cache \ # 显式指定缓存来源
            --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \ # 显式指定缓存目标和模式
            --load . # 從當前目錄 (外部倉庫) 建置，並載入镜像到本地

      - name: 將 Docker 镜像儲存為 tar 檔案
        run: |
          REPO_NAME="${{ steps.clone_repo.outputs.REPO_NAME }}" # 從前一個 step 取得 REPO_NAME
          IMAGE_TAR="$REPO_NAME.tar"
          docker save -o $IMAGE_TAR $IMAGE_TAG
          echo "Docker 镜像已儲存為 $IMAGE_TAR"

      - name: 上傳 Docker 镜像工件
        uses: actions/upload-artifact@4 # 升級到 v4 版本
        with:
          name: ${{ steps.clone_repo.outputs.REPO_NAME }} # 工件名稱使用倉庫名
          path: ${{ steps.clone_repo.outputs.REPO_NAME }}.tar
